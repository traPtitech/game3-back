// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/traPtitech/game3-back/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OAuth認証コールバック
	// (GET /auth/callback)
	OauthCallback(ctx echo.Context, params OauthCallbackParams) error
	// ログイン
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// ログアウト
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// イベントのリストを取得
	// (GET /events)
	GetEvents(ctx echo.Context) error
	// イベントを登録
	// (POST /events)
	PostEvent(ctx echo.Context) error
	// 開催中のイベントを取得
	// (GET /events/now)
	GetCurrentEvent(ctx echo.Context) error
	// イベントの情報を取得
	// (GET /events/{eventSlug})
	GetEvent(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントの情報を変更
	// (PATCH /events/{eventSlug})
	PatchEvent(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントとイベントに登録されているゲームの情報をCSV形式で取得
	// (GET /events/{eventSlug}/csv)
	GetEventCsv(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントに登録されているゲームのリストを取得
	// (GET /events/{eventSlug}/games)
	GetEventGames(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントの画像を取得
	// (GET /events/{eventSlug}/image)
	GetEventImage(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントに登録されているタームのリストを取得
	// (GET /events/{eventSlug}/terms)
	GetEventTerms(ctx echo.Context, eventSlug EventSlugInPath) error
	// ゲームのリストを取得 GET /games?termId=X&eventSlug=X&userId=X&include=unpublished
	// (GET /games)
	GetGames(ctx echo.Context, params GetGamesParams) error
	// ゲームを登録
	// (POST /games)
	PostGame(ctx echo.Context) error
	// ゲーム情報を取得
	// (GET /games/{gameId})
	GetGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲーム情報を変更
	// (PATCH /games/{gameId})
	PatchGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲームのアイコン画像を取得
	// (GET /games/{gameId}/icon)
	GetGameIcon(ctx echo.Context, gameId GameIdInPath) error
	// ゲームの画像を取得
	// (GET /games/{gameId}/image)
	GetGameImage(ctx echo.Context, gameId GameIdInPath) error
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// イベントに登録されているタームのリストを取得
	// (GET /terms)
	GetTerms(ctx echo.Context) error
	// タームを登録
	// (POST /terms)
	PostTerm(ctx echo.Context) error
	// ターム情報を取得
	// (GET /terms/{termId})
	GetTerm(ctx echo.Context, termId TermIdInPath) error
	// ターム情報を変更
	// (PATCH /terms/{termId})
	PatchTerm(ctx echo.Context, termId TermIdInPath) error
	// タームに登録されているゲームのリストを取得
	// (GET /terms/{termId}/games)
	GetTermGames(ctx echo.Context, termId TermIdInPath) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// 自分のユーザー情報を取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
	// 自分が登録したゲームのリストを取得
	// (GET /users/me/games)
	GetMeGames(ctx echo.Context) error
	// ユーザー情報を取得
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId UserIdInPath) error
	// ユーザーが登録したゲームのリストを取得
	// (GET /users/{userId}/games)
	GetUserGames(ctx echo.Context, userId UserIdInPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OauthCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OauthCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OauthCallback(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx)
	return err
}

// PostEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEvent(ctx)
	return err
}

// GetCurrentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentEvent(ctx)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvent(ctx, eventSlug)
	return err
}

// PatchEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEvent(ctx, eventSlug)
	return err
}

// GetEventCsv converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventCsv(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventCsv(ctx, eventSlug)
	return err
}

// GetEventGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventGames(ctx, eventSlug)
	return err
}

// GetEventImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventImage(ctx, eventSlug)
	return err
}

// GetEventTerms converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventTerms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventTerms(ctx, eventSlug)
	return err
}

// GetGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetGames(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams
	// ------------- Optional query parameter "termId" -------------

	err = runtime.BindQueryParameter("form", true, false, "termId", ctx.QueryParams(), &params.TermId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// ------------- Optional query parameter "eventSlug" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventSlug", ctx.QueryParams(), &params.EventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGames(ctx, params)
	return err
}

// PostGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostGame(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGame(ctx)
	return err
}

// GetGame converts echo context to params.
func (w *ServerInterfaceWrapper) GetGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGame(ctx, gameId)
	return err
}

// PatchGame converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGame(ctx, gameId)
	return err
}

// GetGameIcon converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameIcon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameIcon(ctx, gameId)
	return err
}

// GetGameImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImage(ctx, gameId)
	return err
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetTerms converts echo context to params.
func (w *ServerInterfaceWrapper) GetTerms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTerms(ctx)
	return err
}

// PostTerm converts echo context to params.
func (w *ServerInterfaceWrapper) PostTerm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTerm(ctx)
	return err
}

// GetTerm converts echo context to params.
func (w *ServerInterfaceWrapper) GetTerm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTerm(ctx, termId)
	return err
}

// PatchTerm converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTerm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTerm(ctx, termId)
	return err
}

// GetTermGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetTermGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTermGames(ctx, termId)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetMeGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeGames(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMeGames(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// GetUserGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserGames(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/callback", wrapper.OauthCallback)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvent)
	router.GET(baseURL+"/events/now", wrapper.GetCurrentEvent)
	router.GET(baseURL+"/events/:eventSlug", wrapper.GetEvent)
	router.PATCH(baseURL+"/events/:eventSlug", wrapper.PatchEvent)
	router.GET(baseURL+"/events/:eventSlug/csv", wrapper.GetEventCsv)
	router.GET(baseURL+"/events/:eventSlug/games", wrapper.GetEventGames)
	router.GET(baseURL+"/events/:eventSlug/image", wrapper.GetEventImage)
	router.GET(baseURL+"/events/:eventSlug/terms", wrapper.GetEventTerms)
	router.GET(baseURL+"/games", wrapper.GetGames)
	router.POST(baseURL+"/games", wrapper.PostGame)
	router.GET(baseURL+"/games/:gameId", wrapper.GetGame)
	router.PATCH(baseURL+"/games/:gameId", wrapper.PatchGame)
	router.GET(baseURL+"/games/:gameId/icon", wrapper.GetGameIcon)
	router.GET(baseURL+"/games/:gameId/image", wrapper.GetGameImage)
	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/terms", wrapper.GetTerms)
	router.POST(baseURL+"/terms", wrapper.PostTerm)
	router.GET(baseURL+"/terms/:termId", wrapper.GetTerm)
	router.PATCH(baseURL+"/terms/:termId", wrapper.PatchTerm)
	router.GET(baseURL+"/terms/:termId/games", wrapper.GetTermGames)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/users/me", wrapper.GetMe)
	router.GET(baseURL+"/users/me/games", wrapper.GetMeGames)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.GET(baseURL+"/users/:userId/games", wrapper.GetUserGames)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
