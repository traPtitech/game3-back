// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/traPtitech/game3-back/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OAuth認証コールバック
	// (GET /auth/callback)
	OauthCallback(ctx echo.Context, params OauthCallbackParams) error
	// ログイン
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// ログアウト
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// コンタクト用メールを送信
	// (POST /contacts)
	PostContacts(ctx echo.Context) error
	// イベントのリストを取得
	// (GET /events)
	GetEvents(ctx echo.Context) error
	// イベントを登録
	// (POST /events)
	PostEvent(ctx echo.Context) error
	// 開催中のイベントを取得
	// (GET /events/now)
	GetCurrentEvent(ctx echo.Context) error
	// イベントの情報を取得
	// (GET /events/{eventSlug})
	GetEvent(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントの情報を変更
	// (PATCH /events/{eventSlug})
	PatchEvent(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントとイベントに登録されているゲームの情報をCSV形式で取得
	// (GET /events/{eventSlug}/csv)
	GetEventCsv(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントに登録されているゲームのリストを取得
	// (GET /events/{eventSlug}/games)
	GetEventGames(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントの画像を取得
	// (GET /events/{eventSlug}/image)
	GetEventImage(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントに登録されているタームのリストを取得
	// (GET /events/{eventSlug}/terms)
	GetEventTerms(ctx echo.Context, eventSlug EventSlugInPath) error
	// ゲームのリストを取得 GET /games?termId=X&eventSlug=X&userId=X&include=unpublished
	// (GET /games)
	GetGames(ctx echo.Context, params GetGamesParams) error
	// ゲームを登録
	// (POST /games)
	PostGame(ctx echo.Context) error
	// ゲーム情報を取得
	// (GET /games/{gameId})
	GetGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲーム情報を変更
	// (PATCH /games/{gameId})
	PatchGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲームのアイコン画像を取得
	// (GET /games/{gameId}/icon)
	GetGameIcon(ctx echo.Context, gameId GameIdInPath) error
	// ゲームの画像を取得
	// (GET /games/{gameId}/image)
	GetGameImage(ctx echo.Context, gameId GameIdInPath) error
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// イベントに登録されているタームのリストを取得
	// (GET /terms)
	GetTerms(ctx echo.Context) error
	// タームを登録
	// (POST /terms)
	PostTerm(ctx echo.Context) error
	// ターム情報を取得
	// (GET /terms/{termId})
	GetTerm(ctx echo.Context, termId TermIdInPath) error
	// ターム情報を変更
	// (PATCH /terms/{termId})
	PatchTerm(ctx echo.Context, termId TermIdInPath) error
	// タームに登録されているゲームのリストを取得
	// (GET /terms/{termId}/games)
	GetTermGames(ctx echo.Context, termId TermIdInPath) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// 自分のユーザー情報を取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
	// 自分が登録したゲームのリストを取得
	// (GET /users/me/games)
	GetMeGames(ctx echo.Context) error
	// ユーザー情報を取得
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId UserIdInPath) error
	// ユーザーが登録したゲームのリストを取得
	// (GET /users/{userId}/games)
	GetUserGames(ctx echo.Context, userId UserIdInPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OauthCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OauthCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OauthCallback(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// PostContacts converts echo context to params.
func (w *ServerInterfaceWrapper) PostContacts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostContacts(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx)
	return err
}

// PostEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEvent(ctx)
	return err
}

// GetCurrentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentEvent(ctx)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvent(ctx, eventSlug)
	return err
}

// PatchEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEvent(ctx, eventSlug)
	return err
}

// GetEventCsv converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventCsv(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventCsv(ctx, eventSlug)
	return err
}

// GetEventGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventGames(ctx, eventSlug)
	return err
}

// GetEventImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventImage(ctx, eventSlug)
	return err
}

// GetEventTerms converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventTerms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventTerms(ctx, eventSlug)
	return err
}

// GetGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetGames(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams
	// ------------- Optional query parameter "termId" -------------

	err = runtime.BindQueryParameter("form", true, false, "termId", ctx.QueryParams(), &params.TermId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// ------------- Optional query parameter "eventSlug" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventSlug", ctx.QueryParams(), &params.EventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Optional query parameter "include" -------------

	err = runtime.BindQueryParameter("form", true, false, "include", ctx.QueryParams(), &params.Include)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGames(ctx, params)
	return err
}

// PostGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostGame(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGame(ctx)
	return err
}

// GetGame converts echo context to params.
func (w *ServerInterfaceWrapper) GetGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGame(ctx, gameId)
	return err
}

// PatchGame converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGame(ctx, gameId)
	return err
}

// GetGameIcon converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameIcon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameIcon(ctx, gameId)
	return err
}

// GetGameImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImage(ctx, gameId)
	return err
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetTerms converts echo context to params.
func (w *ServerInterfaceWrapper) GetTerms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTerms(ctx)
	return err
}

// PostTerm converts echo context to params.
func (w *ServerInterfaceWrapper) PostTerm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTerm(ctx)
	return err
}

// GetTerm converts echo context to params.
func (w *ServerInterfaceWrapper) GetTerm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTerm(ctx, termId)
	return err
}

// PatchTerm converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTerm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTerm(ctx, termId)
	return err
}

// GetTermGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetTermGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTermGames(ctx, termId)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetMeGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeGames(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMeGames(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// GetUserGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserGames(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/callback", wrapper.OauthCallback)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/contacts", wrapper.PostContacts)
	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvent)
	router.GET(baseURL+"/events/now", wrapper.GetCurrentEvent)
	router.GET(baseURL+"/events/:eventSlug", wrapper.GetEvent)
	router.PATCH(baseURL+"/events/:eventSlug", wrapper.PatchEvent)
	router.GET(baseURL+"/events/:eventSlug/csv", wrapper.GetEventCsv)
	router.GET(baseURL+"/events/:eventSlug/games", wrapper.GetEventGames)
	router.GET(baseURL+"/events/:eventSlug/image", wrapper.GetEventImage)
	router.GET(baseURL+"/events/:eventSlug/terms", wrapper.GetEventTerms)
	router.GET(baseURL+"/games", wrapper.GetGames)
	router.POST(baseURL+"/games", wrapper.PostGame)
	router.GET(baseURL+"/games/:gameId", wrapper.GetGame)
	router.PATCH(baseURL+"/games/:gameId", wrapper.PatchGame)
	router.GET(baseURL+"/games/:gameId/icon", wrapper.GetGameIcon)
	router.GET(baseURL+"/games/:gameId/image", wrapper.GetGameImage)
	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/terms", wrapper.GetTerms)
	router.POST(baseURL+"/terms", wrapper.PostTerm)
	router.GET(baseURL+"/terms/:termId", wrapper.GetTerm)
	router.PATCH(baseURL+"/terms/:termId", wrapper.PatchTerm)
	router.GET(baseURL+"/terms/:termId/games", wrapper.GetTermGames)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/users/me", wrapper.GetMe)
	router.GET(baseURL+"/users/me/games", wrapper.GetMeGames)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.GET(baseURL+"/users/:userId/games", wrapper.GetUserGames)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
