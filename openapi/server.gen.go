// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/traPtitech/game3-back/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OAuth認証コールバック
	// (GET /auth/callback)
	OauthCallback(ctx echo.Context, params OauthCallbackParams) error
	// ログイン
	// (GET /auth/login)
	Login(ctx echo.Context, params LoginParams) error
	// ログアウト
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// イベントのリストを取得
	// (GET /events)
	GetEvents(ctx echo.Context) error
	// イベントを登録
	// (POST /events)
	PostEvent(ctx echo.Context) error
	// 開催中のイベントを取得
	// (GET /events/now)
	GetCurrentEvent(ctx echo.Context) error
	// イベントの情報を取得
	// (GET /events/{eventSlug})
	GetEvent(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントの情報を変更
	// (PATCH /events/{eventSlug})
	PatchEvent(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントとイベントに登録されているゲームの情報をCSV形式で取得
	// (GET /events/{eventSlug}/csv)
	GetEventCsv(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントに登録されているゲームのリストを取得
	// (GET /events/{eventSlug}/games)
	GetEventGames(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントの画像を取得
	// (GET /events/{eventSlug}/image)
	GetEventImage(ctx echo.Context, eventSlug EventSlugInPath) error
	// イベントに登録されているタームのリストを取得
	// (GET /events/{eventSlug}/terms)
	GetEventTerms(ctx echo.Context, eventSlug EventSlugInPath) error
	// ゲームのリストを取得 GET /games?termId=X&eventSlug=X&userId=X&include=unpublished
	// (GET /games)
	GetGames(ctx echo.Context, params GetGamesParams) error
	// ゲームを登録
	// (POST /games)
	PostGame(ctx echo.Context) error
	// ゲーム情報を取得
	// (GET /games/{gameId})
	GetGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲーム情報を変更
	// (PATCH /games/{gameId})
	PatchGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲームのアイコン画像を取得
	// (GET /games/{gameId}/icon)
	GetGameIcon(ctx echo.Context, gameId GameIdInPath) error
	// ゲームの画像を取得
	// (GET /games/{gameId}/image)
	GetGameImage(ctx echo.Context, gameId GameIdInPath) error
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// イベントに登録されているタームのリストを取得
	// (GET /terms)
	GetTerms(ctx echo.Context) error
	// タームを登録
	// (POST /terms)
	PostTerm(ctx echo.Context) error
	// ターム情報を取得
	// (GET /terms/{termId})
	GetTerm(ctx echo.Context, termId TermIdInPath) error
	// ターム情報を変更
	// (PATCH /terms/{termId})
	PatchTerm(ctx echo.Context, termId TermIdInPath) error
	// タームに登録されているゲームのリストを取得
	// (GET /terms/{termId}/games)
	GetTermGames(ctx echo.Context, termId TermIdInPath) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// 自分のユーザー情報を取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
	// 自分が登録したゲームのリストを取得
	// (GET /users/me/games)
	GetMeGames(ctx echo.Context) error
	// ユーザー情報を取得
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId UserIdInPath) error
	// ユーザーが登録したゲームのリストを取得
	// (GET /users/{userId}/games)
	GetUserGames(ctx echo.Context, userId UserIdInPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OauthCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OauthCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OauthCallback(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginParams
	// ------------- Required query parameter "redirect" -------------

	err = runtime.BindQueryParameter("form", true, true, "redirect", ctx.QueryParams(), &params.Redirect)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx, params)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx)
	return err
}

// PostEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEvent(ctx)
	return err
}

// GetCurrentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentEvent(ctx)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvent(ctx, eventSlug)
	return err
}

// PatchEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEvent(ctx, eventSlug)
	return err
}

// GetEventCsv converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventCsv(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventCsv(ctx, eventSlug)
	return err
}

// GetEventGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventGames(ctx, eventSlug)
	return err
}

// GetEventImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventImage(ctx, eventSlug)
	return err
}

// GetEventTerms converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventTerms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventSlug" -------------
	var eventSlug EventSlugInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventSlug", runtime.ParamLocationPath, ctx.Param("eventSlug"), &eventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventTerms(ctx, eventSlug)
	return err
}

// GetGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetGames(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams
	// ------------- Optional query parameter "termId" -------------

	err = runtime.BindQueryParameter("form", true, false, "termId", ctx.QueryParams(), &params.TermId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// ------------- Optional query parameter "eventSlug" -------------

	err = runtime.BindQueryParameter("form", true, false, "eventSlug", ctx.QueryParams(), &params.EventSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventSlug: %s", err))
	}

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Optional query parameter "includeUnpublished" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeUnpublished", ctx.QueryParams(), &params.IncludeUnpublished)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeUnpublished: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGames(ctx, params)
	return err
}

// PostGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostGame(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGame(ctx)
	return err
}

// GetGame converts echo context to params.
func (w *ServerInterfaceWrapper) GetGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGame(ctx, gameId)
	return err
}

// PatchGame converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGame(ctx, gameId)
	return err
}

// GetGameIcon converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameIcon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameIcon(ctx, gameId)
	return err
}

// GetGameImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImage(ctx, gameId)
	return err
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// GetTerms converts echo context to params.
func (w *ServerInterfaceWrapper) GetTerms(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTerms(ctx)
	return err
}

// PostTerm converts echo context to params.
func (w *ServerInterfaceWrapper) PostTerm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTerm(ctx)
	return err
}

// GetTerm converts echo context to params.
func (w *ServerInterfaceWrapper) GetTerm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTerm(ctx, termId)
	return err
}

// PatchTerm converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTerm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTerm(ctx, termId)
	return err
}

// GetTermGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetTermGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "termId" -------------
	var termId TermIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "termId", runtime.ParamLocationPath, ctx.Param("termId"), &termId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter termId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTermGames(ctx, termId)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetMeGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeGames(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMeGames(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// GetUserGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserGames(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/callback", wrapper.OauthCallback)
	router.GET(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvent)
	router.GET(baseURL+"/events/now", wrapper.GetCurrentEvent)
	router.GET(baseURL+"/events/:eventSlug", wrapper.GetEvent)
	router.PATCH(baseURL+"/events/:eventSlug", wrapper.PatchEvent)
	router.GET(baseURL+"/events/:eventSlug/csv", wrapper.GetEventCsv)
	router.GET(baseURL+"/events/:eventSlug/games", wrapper.GetEventGames)
	router.GET(baseURL+"/events/:eventSlug/image", wrapper.GetEventImage)
	router.GET(baseURL+"/events/:eventSlug/terms", wrapper.GetEventTerms)
	router.GET(baseURL+"/games", wrapper.GetGames)
	router.POST(baseURL+"/games", wrapper.PostGame)
	router.GET(baseURL+"/games/:gameId", wrapper.GetGame)
	router.PATCH(baseURL+"/games/:gameId", wrapper.PatchGame)
	router.GET(baseURL+"/games/:gameId/icon", wrapper.GetGameIcon)
	router.GET(baseURL+"/games/:gameId/image", wrapper.GetGameImage)
	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/terms", wrapper.GetTerms)
	router.POST(baseURL+"/terms", wrapper.PostTerm)
	router.GET(baseURL+"/terms/:termId", wrapper.GetTerm)
	router.PATCH(baseURL+"/terms/:termId", wrapper.PatchTerm)
	router.GET(baseURL+"/terms/:termId/games", wrapper.GetTermGames)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/users/me", wrapper.GetMe)
	router.GET(baseURL+"/users/me/games", wrapper.GetMeGames)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.GET(baseURL+"/users/:userId/games", wrapper.GetUserGames)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"G3/K5xvPXNE40/hvAAAA///b2R8Mo1QAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
