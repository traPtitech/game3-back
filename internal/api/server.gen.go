// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/traPtitech/game3-back/internal/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ログイン
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// ログアウト
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// コンタクト用メールを送信
	// (POST /contacts)
	PostContacts(ctx echo.Context) error
	// イベントのリストを取得
	// (GET /events)
	GetEvents(ctx echo.Context) error
	// イベントを登録
	// (POST /events)
	PostEvent(ctx echo.Context) error
	// 開催中のイベントを取得
	// (GET /events/now)
	GetCurrentEvent(ctx echo.Context) error
	// イベントの情報を取得
	// (GET /events/{eventId})
	GetEvent(ctx echo.Context, eventId EventIdInPath) error
	// イベントの情報を変更
	// (PATCH /events/{eventId})
	PatchEvent(ctx echo.Context, eventId EventIdInPath) error
	// イベントとイベントに登録されているゲームの情報をCSV形式で取得
	// (GET /events/{eventId}/csv)
	GetEventCsv(ctx echo.Context, eventId EventIdInPath) error
	// イベントに登録されているゲームのリストを取得
	// (GET /events/{eventId}/games)
	GetEventGames(ctx echo.Context, eventId EventIdInPath) error
	// イベントの画像を取得
	// (GET /events/{eventId}/image)
	GetEventImage(ctx echo.Context, eventId EventIdInPath) error
	// ゲームを登録
	// (POST /games)
	PostGame(ctx echo.Context) error
	// ゲーム情報を取得
	// (GET /games/{gameId})
	GetGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲーム情報を変更
	// (PATCH /games/{gameId})
	PatchGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲームの画像を取得
	// (GET /games/{gameId}/image)
	GetGameImage(ctx echo.Context, gameId GameIdInPath) error
	// 自分のユーザー情報を取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
	// 自分が登録したゲームのリストを取得
	// (GET /users/me/games)
	GetMeGames(ctx echo.Context) error
	// ユーザー情報を取得
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId UserIdInPath) error
	// ユーザーが登録したゲームのリストを取得
	// (GET /users/{userId}/games)
	GetUserGames(ctx echo.Context, userId UserIdInPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// PostContacts converts echo context to params.
func (w *ServerInterfaceWrapper) PostContacts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostContacts(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx)
	return err
}

// PostEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEvent(ctx)
	return err
}

// GetCurrentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentEvent(ctx)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvent(ctx, eventId)
	return err
}

// PatchEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEvent(ctx, eventId)
	return err
}

// GetEventCsv converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventCsv(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventCsv(ctx, eventId)
	return err
}

// GetEventGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventGames(ctx, eventId)
	return err
}

// GetEventImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventImage(ctx, eventId)
	return err
}

// PostGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostGame(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGame(ctx)
	return err
}

// GetGame converts echo context to params.
func (w *ServerInterfaceWrapper) GetGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGame(ctx, gameId)
	return err
}

// PatchGame converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGame(ctx, gameId)
	return err
}

// GetGameImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImage(ctx, gameId)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetMeGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeGames(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMeGames(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// GetUserGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserGames(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/contacts", wrapper.PostContacts)
	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvent)
	router.GET(baseURL+"/events/now", wrapper.GetCurrentEvent)
	router.GET(baseURL+"/events/:eventId", wrapper.GetEvent)
	router.PATCH(baseURL+"/events/:eventId", wrapper.PatchEvent)
	router.GET(baseURL+"/events/:eventId/csv", wrapper.GetEventCsv)
	router.GET(baseURL+"/events/:eventId/games", wrapper.GetEventGames)
	router.GET(baseURL+"/events/:eventId/image", wrapper.GetEventImage)
	router.POST(baseURL+"/games", wrapper.PostGame)
	router.GET(baseURL+"/games/:gameId", wrapper.GetGame)
	router.PATCH(baseURL+"/games/:gameId", wrapper.PatchGame)
	router.GET(baseURL+"/games/:gameId/image", wrapper.GetGameImage)
	router.GET(baseURL+"/users/me", wrapper.GetMe)
	router.GET(baseURL+"/users/me/games", wrapper.GetMeGames)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.GET(baseURL+"/users/:userId/games", wrapper.GetUserGames)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LabljqhlTnghVJup/T8AAP//h29PBwAyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
