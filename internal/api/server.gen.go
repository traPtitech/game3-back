// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/traPtitech/game3-back/internal/api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OAuth認証コールバック
	// (GET /auth/callback)
	OauthCallback(ctx echo.Context, params OauthCallbackParams) error
	// ログイン
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// ログアウト
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// コンタクト用メールを送信
	// (POST /contacts)
	PostContacts(ctx echo.Context) error
	// イベントのリストを取得
	// (GET /events)
	GetEvents(ctx echo.Context) error
	// イベントを登録
	// (POST /events)
	PostEvent(ctx echo.Context) error
	// 開催中のイベントを取得
	// (GET /events/now)
	GetCurrentEvent(ctx echo.Context) error
	// イベントの情報を取得
	// (GET /events/{eventId})
	GetEvent(ctx echo.Context, eventId EventIdInPath) error
	// イベントの情報を変更
	// (PATCH /events/{eventId})
	PatchEvent(ctx echo.Context, eventId EventIdInPath) error
	// イベントとイベントに登録されているゲームの情報をCSV形式で取得
	// (GET /events/{eventId}/csv)
	GetEventCsv(ctx echo.Context, eventId EventIdInPath) error
	// イベントに登録されているゲームのリストを取得
	// (GET /events/{eventId}/games)
	GetEventGames(ctx echo.Context, eventId EventIdInPath) error
	// イベントの画像を取得
	// (GET /events/{eventId}/image)
	GetEventImage(ctx echo.Context, eventId EventIdInPath) error
	// ゲームを登録
	// (POST /games)
	PostGame(ctx echo.Context) error
	// ゲーム情報を取得
	// (GET /games/{gameId})
	GetGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲーム情報を変更
	// (PATCH /games/{gameId})
	PatchGame(ctx echo.Context, gameId GameIdInPath) error
	// ゲームのアイコン画像を取得
	// (GET /games/{gameId}/icon)
	GetGameIcon(ctx echo.Context, gameId GameIdInPath) error
	// ゲームの画像を取得
	// (GET /games/{gameId}/image)
	GetGameImage(ctx echo.Context, gameId GameIdInPath) error
	// サーバーの生存確認
	// (GET /ping)
	PingServer(ctx echo.Context) error
	// テスト用
	// (GET /test)
	Test(ctx echo.Context) error
	// 自分のユーザー情報を取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
	// 自分が登録したゲームのリストを取得
	// (GET /users/me/games)
	GetMeGames(ctx echo.Context) error
	// ユーザー情報を取得
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId UserIdInPath) error
	// ユーザーが登録したゲームのリストを取得
	// (GET /users/{userId}/games)
	GetUserGames(ctx echo.Context, userId UserIdInPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OauthCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OauthCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OauthCallback(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// PostContacts converts echo context to params.
func (w *ServerInterfaceWrapper) PostContacts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostContacts(ctx)
	return err
}

// GetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvents(ctx)
	return err
}

// PostEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PostEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEvent(ctx)
	return err
}

// GetCurrentEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentEvent(ctx)
	return err
}

// GetEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEvent(ctx, eventId)
	return err
}

// PatchEvent converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEvent(ctx, eventId)
	return err
}

// GetEventCsv converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventCsv(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventCsv(ctx, eventId)
	return err
}

// GetEventGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventGames(ctx, eventId)
	return err
}

// GetEventImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "eventId" -------------
	var eventId EventIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEventImage(ctx, eventId)
	return err
}

// PostGame converts echo context to params.
func (w *ServerInterfaceWrapper) PostGame(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGame(ctx)
	return err
}

// GetGame converts echo context to params.
func (w *ServerInterfaceWrapper) GetGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGame(ctx, gameId)
	return err
}

// PatchGame converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGame(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGame(ctx, gameId)
	return err
}

// GetGameIcon converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameIcon(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameIcon(ctx, gameId)
	return err
}

// GetGameImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gameId" -------------
	var gameId GameIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "gameId", runtime.ParamLocationPath, ctx.Param("gameId"), &gameId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gameId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameImage(ctx, gameId)
	return err
}

// PingServer converts echo context to params.
func (w *ServerInterfaceWrapper) PingServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingServer(ctx)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Test(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetMeGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeGames(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMeGames(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// GetUserGames converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGames(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserIdInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserGames(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/callback", wrapper.OauthCallback)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/contacts", wrapper.PostContacts)
	router.GET(baseURL+"/events", wrapper.GetEvents)
	router.POST(baseURL+"/events", wrapper.PostEvent)
	router.GET(baseURL+"/events/now", wrapper.GetCurrentEvent)
	router.GET(baseURL+"/events/:eventId", wrapper.GetEvent)
	router.PATCH(baseURL+"/events/:eventId", wrapper.PatchEvent)
	router.GET(baseURL+"/events/:eventId/csv", wrapper.GetEventCsv)
	router.GET(baseURL+"/events/:eventId/games", wrapper.GetEventGames)
	router.GET(baseURL+"/events/:eventId/image", wrapper.GetEventImage)
	router.POST(baseURL+"/games", wrapper.PostGame)
	router.GET(baseURL+"/games/:gameId", wrapper.GetGame)
	router.PATCH(baseURL+"/games/:gameId", wrapper.PatchGame)
	router.GET(baseURL+"/games/:gameId/icon", wrapper.GetGameIcon)
	router.GET(baseURL+"/games/:gameId/image", wrapper.GetGameImage)
	router.GET(baseURL+"/ping", wrapper.PingServer)
	router.GET(baseURL+"/test", wrapper.Test)
	router.GET(baseURL+"/users/me", wrapper.GetMe)
	router.GET(baseURL+"/users/me/games", wrapper.GetMeGames)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.GET(baseURL+"/users/:userId/games", wrapper.GetUserGames)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
